Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform vec3 eye;
	varying vec3 rayDir;
	uniform mat4 quadrics[32];
	uniform vec4 materials[16];
	uniform samplerCube background;
	uniform sampler2D prevImage;
	uniform sampler2D randomTex;
	uniform float frameCount;
	varying vec2 tex;
	
	// global variables
	const int numOfObjects = 4;
	const float PI = 3.14159265;
	const vec3 lightSrcMidPoint = vec3(3.1, 2.0, -1.0);
	const float lightSrcSideLength = 0.6;
	const vec3 lightEmission = vec3(30.0, 30.0, 30.0);
	const vec3 lightNormal = vec3(-1.0, 0.0, 0.0);
	
	float random(vec3 scale, float seed) {
		return texture2D(randomTex, seed * abs(dot(scale.xz, tex)) * tex).r;
	}
	
	vec3 sampleCosine(float seed, vec3 normal) {
		float u = random(vec3(12.9898, 78.233, 151.7182), seed);
		float v = random(vec3(63.7264, 10.873, 623.6736), seed);
		float r = sqrt(u);
		float angle = 120.283185307179586 * v;
		vec3 sdir, tdir;
		if (abs(normal.y) > 0.995) {
			sdir = normalize(cross(normal, vec3(0.0, 0.0, -1.0)));
		} else {
			sdir = normalize(vec3(-normal.z, 0.0, normal.x));
		}
		tdir = cross(normal, sdir);
		return r*cos(angle)*sdir + r*sin(angle)*tdir + sqrt(1.-u)*normal;
	}

	float intersectClippedQuadric(mat4 A, mat4 B, vec4 e, vec4 d) {
        float a = dot(d, A * d);
        float b = dot(e, A * d) + dot(d, A * e);
        float c = dot(e, A * e);
   
        float discr = b * b - 4.0 * a * c;
        if (discr < 0.0)
			return -1.0;
        float sqrt_discr = sqrt(discr);
        float t1 = (-b + sqrt_discr)/2.0/a;
        float t2 = (-b - sqrt_discr)/2.0/a;
		
		vec4 hit1 = e + d * t1;
		vec4 hit2 = e + d * t2;
		
		if(dot(hit1, hit1 * B) > 0.0)
			t1 = -1.0;
		if(dot(hit2, hit2 * B) > 0.0)
			t2 = -1.0; 
   
		float t = min(t1, t2);
        if(t < 0.0)
			t = max(t1, t2);
        return t;
    }
	
	vec3 getQuadricNormal(mat4 A, vec4 hit)
	{
		return normalize((A * hit + hit * A).xyz);
	}
	
	float intersectObjects(vec4 e, vec4 d, out mat4 outQuadric, out vec4 outMaterial) {
		float objT = 10000.0;
		
		for(int i=0; i<numOfObjects; ++i) {
			float t = intersectClippedQuadric(quadrics[2*i], quadrics[2*i+1], e, d);
			if(t > 0.0 && t < objT) {
				objT = t;
				outQuadric = quadrics[2*i];
				outMaterial = materials[i];				
			}
        }
		return objT;
	}
	
	float intersectLight(vec4 e, vec4 d) {
		float t = (lightSrcMidPoint.x - e.x) / d.x;
		vec4 p = e + t * d;
		if (abs(p.y - lightSrcMidPoint.y) < lightSrcSideLength * 0.5 && abs(p.z - lightSrcMidPoint.z) < lightSrcSideLength * 0.5)
			return t;
		return -1.0;
	}
	
	vec3 trace(inout vec4 e, inout vec4 d, inout vec3 contrib, int iReflection)
    {
        vec4 bestMaterial;
        mat4 bestQuadric;
		
		float objT = intersectObjects(e, d, bestQuadric, bestMaterial);
		float lightT = intersectLight(e, d);
		
		// showing the light source directly
		if (lightT > 0.0 && lightT < objT && iReflection == 0)
			return vec3(1.0, 1.0, 1.0);

		// if the ray did not hit anything, then the path reached its end
		if(objT > 9999.0)
		{
			vec3 temp = contrib;
			contrib = vec3(0.0);
			// return with the contribution of the path
			return temp * textureCube(background, d.xyz).rgb;
		}
		
		vec4 hit = e + d * objT;
		vec3 normal = getQuadricNormal(bestQuadric, hit);
		if(dot(d.xyz, normal) > 0.0)
			normal = normal * (-1.0);
		
		// contribution = kd * PI (which is the reflectance aka the albedo of the surface)
		contrib *= bestMaterial.xyz * PI;
		e = hit + vec4(normal, 0.0) * 1.0e-3;
		
		// handling reflective surfaces
		if(bestMaterial.w > 0.01) {
			d.xyz = reflect(d.xyz, normal);
			return vec3(0.0, 0.0, 0.0);
		} else
			d.xyz = sampleCosine(frameCount, normal);
		
		// shooting a shadow ray towards the light source for testing its visibility
		vec3 lightPoint = vec3(lightSrcMidPoint.x, lightSrcMidPoint.y + (d.y-0.5) * lightSrcSideLength, lightSrcMidPoint.z + (d.z-0.5) * lightSrcSideLength);
		vec3 toLight = lightPoint - e.xyz;
		vec3 normToLight = normalize(toLight);
		vec4 normToLightDir = vec4(normToLight, 0.0);
		
		objT = intersectObjects(e, normToLightDir, bestQuadric, bestMaterial);
		lightT = intersectLight(e, normToLightDir);
		
		if (lightT > 0.0 && lightT < objT)
		{
			float costheta1 = max(dot(normal, normToLight), 0.0);
			float costheta2 = max(dot(-normToLight, lightNormal), 0.0);
			float dist = length(toLight);
			return lightEmission * (costheta1 * costheta2) / (dist * dist) * contrib;
		}
		return vec3(0.0, 0.0, 0.0);
	}
	
	void main(void) {
		vec4 e = vec4(eye, 1.0);
		vec4 d = vec4(normalize(rayDir + 8.0e-4 * sampleCosine(frameCount, eye)), 0.0);
		vec4 outColor = vec4(0.0, 0.0, 0.0, 1.0);
        vec3 contrib = vec3(1.0, 1.0, 1.0);
		const int pathLength = 5;
		
        for(int iReflection = 0; iReflection < pathLength; iReflection++)
        {
			outColor.xyz += trace(e, d, contrib, iReflection);
			if(dot(contrib, contrib) < 1.0e-4)
				break;
        }
		gl_FragColor = (outColor + texture2D(prevImage, tex) * (frameCount - 1.0)) / frameCount;
	}
`;